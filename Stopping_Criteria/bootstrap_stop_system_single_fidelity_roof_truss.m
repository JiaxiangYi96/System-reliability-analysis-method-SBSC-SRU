function obj=bootstrap_stop_system_single_fidelity_roof_truss(search_x,kriging_model,CI_factor,ss,type)

% search_x:   the sample set generated by MCS
% Kriging_model:  the surrogate model generated by the last generation
% CI_factor: to determine confidence level of bootstrap
switch type
    case 'parallel'
        %% First stage: identify the highly-uncertain samples among the MCS population
        % calculate the predicted value
        num_obj = length(kriging_model);
        u_g = zeros(size(search_x,1), num_obj);
        mse_g = zeros(size(search_x,1), num_obj);
        S_predict_safe_Comp=cell(1,num_obj);
        S_predict_fail_Comp=cell(1,num_obj);
        for ii = 1: num_obj
            [u_g(:, ii), mse_g(:, ii)] = predictor(search_x, kriging_model{ii});
            Max_error_Comp(:,ii)=bootstrap_stop_single_fidelity(search_x,kriging_model{ii},0.05);
            S_predict_safe_Comp{ii}=search_x(find(sum([u_g(:, ii)>=0  u_g(:, ii)-2.3867*sqrt(mse_g(:, ii))<0],2)==2),:);
            S_predict_fail_Comp{ii}=search_x(find(sum([u_g(:, ii)<=0  u_g(:, ii)+2.3867*sqrt(mse_g(:, ii))>0],2)==2),:);
        end
        
        % construct the highly uncertainty sample set
        Sample_highly_uncertain=[];
        for jj=1:num_obj
            Sample_highly_uncertain=[Sample_highly_uncertain;S_predict_safe_Comp{jj};S_predict_fail_Comp{jj}];
        end
        Sample_highly_uncertain=unique(Sample_highly_uncertain,'rows');
        for ii = 1: num_obj
            [u_g_uncertain(:, ii), mse_g_uncertain(:, ii)] = predictor(Sample_highly_uncertain, kriging_model{ii});
        end
        mse_g_uncertain=sqrt(max(0,mse_g_uncertain));
        index_fail=find(sum(u_g_uncertain<=0,2)==num_obj);
        index_safe=find(sum(u_g_uncertain<=0,2)< num_obj);
        
        %% Second stage: identify the samples located in the safe and failure areas respectively
        % find the samples located in the failure regions to calculate their wrong sign expectation in safety regions
        Fail_y=u_g_uncertain(index_fail,:);
        Fail_mse=mse_g_uncertain(index_fail,:);
        % calculate the  wrong sign prediction of each component
        for ii=1:num_obj
            p_safe_Comp(:,ii)=Gaussian_CDF(-abs(Fail_y(:,ii)./Fail_mse(:,ii)));
        end
        p_safe=1-prod((1-p_safe_Comp),2);
        % P_fail=normcdf(0,Safe_y,Safe_mse);
        mu_safe=size(Fail_y,1)*mean(p_safe);
        % estimate the bootstrapt confidence interval
        if size(Fail_y,1)>1
            boot_safe = bootstrp(1000,@mean,p_safe);
            boot_safe=sort(boot_safe,1);
            k1=1000*CI_factor/2;
            k2=1000*(1-CI_factor/2);
            F_con_interval=[size(Fail_y,1)*boot_safe(k1,:),size(Fail_y,1)*boot_safe(k2,:)];
            CI_safe_max=max(F_con_interval);
        else
            CI_safe_max=mu_safe;
        end
        %% Third stage: identify the samples located in the safe and failure areas respectively
        Safe_y=u_g_uncertain(index_safe,:);
        Safe_mse=mse_g_uncertain(index_safe,:);
        % calculate the  wrong sign prediction of each component
        for ii=1:num_obj
            p_fail_Comp(:,ii)=Gaussian_CDF(-abs(Safe_y(:,ii)./Safe_mse(:,ii)));
        end
        for jj=1:size(Safe_y,1)
            flag_fail=find(Safe_y(jj,:)<0);
            flag_safe=find(Safe_y(jj,:)>=0);
            p_fail(jj,:)=prod(1-p_fail_Comp(jj,flag_fail)).*prod(p_fail_Comp(jj,flag_safe));
        end
        % P_fail=normcdf(0,Safe_y,Safe_mse);
        mu_fail=size(Safe_y,1)*mean(p_fail);
        if size(Safe_y,1)>1
            % estimate the bootstrapt confidence interval
            boot_sample = bootstrp(1000,@mean,p_fail);
            boot_sample=sort(boot_sample,1);
            k1=1000*CI_factor/2;
            k2=1000*(1-CI_factor/2);
            S_con_interval=[size(Safe_y,1)*boot_sample(k1,:),size(Safe_y,1)*boot_sample(k2,:)];
            CI_fail_max=max(S_con_interval);
        else
            CI_fail_max=mu_fail;
        end
        
        %% Fourth stage: calculate the final value of maximum estimated relative error
        Predict_fail=find(sum(u_g<=0,2)==num_obj);
        N_f=size(Predict_fail,1);
        error_1=abs((N_f/(N_f-CI_safe_max))-1);
        error_2=abs((N_f/(N_f+CI_fail_max))-1);
        obj=max(error_1,error_2);
        %         obj_comp=mean(sqrt(Max_error_Comp.^2))
        %         if obj_comp>0.15
        %             obj= obj_comp;
        %         else
        %             obj=obj_sys;
        %         end
    case 'series'
        %% First stage: identify the highly-uncertain samples among the MCS population
        % calculate the predicted value
        num_obj = length(kriging_model);
        delta=norminv(1-((CI_factor)^1/num_obj)/2);
        u_g = zeros(size(search_x,1), num_obj);
        mse_g = zeros(size(search_x,1), num_obj);
        S_predict_safe_Comp=cell(1,num_obj);
        S_predict_fail_Comp=cell(1,num_obj);
        search_x_1=search_x(:,1:6);
        search_x_2=[search_x(:,1:2),search_x(:,4),search_x(:,8)];
        search_x_3=[search_x(:,1:2),search_x(:,3),search_x(:,7)];
        %% 1
        [u_g(:, 1), mse_g(:, 1)]=predictor(search_x_1,kriging_model{1});
        Max_error_Comp(:,1)=bootstrap_stop_single_fidelity(search_x_1,kriging_model{1},0.05);
        S_predict_safe_Comp{1}=search_x(find(sum([u_g(:, 1)>=0  u_g(:, 1)-delta*sqrt(mse_g(:, 1))<0],2)==2),:);
        S_predict_fail_Comp{1}=search_x(find(sum([u_g(:, 1)<=0  u_g(:, 1)+delta*sqrt(mse_g(:, 1))>0],2)==2),:);
        %% 2
        [u_g(:, 2), mse_g(:, 2)]=predictor(search_x_2,kriging_model{2});
        Max_error_Comp(:,2)=bootstrap_stop_single_fidelity(search_x_2,kriging_model{2},0.05);
        S_predict_safe_Comp{2}=search_x(find(sum([u_g(:,2)>=0  u_g(:, 2)-delta*sqrt(mse_g(:, 2))<0],2)==2),:);
        S_predict_fail_Comp{2}=search_x(find(sum([u_g(:,2)<=0  u_g(:, 2)+delta*sqrt(mse_g(:, 2))>0],2)==2),:);
        [u_g(:, 3), mse_g(:, 3)]=predictor(search_x_3,kriging_model{3});
        Max_error_Comp(:,3)=bootstrap_stop_single_fidelity(search_x_3,kriging_model{3},0.05);
        S_predict_safe_Comp{3}=search_x(find(sum([u_g(:, 3)>=0  u_g(:, 3)-delta*sqrt(mse_g(:, 3))<0],2)==2),:);
        S_predict_fail_Comp{3}=search_x(find(sum([u_g(:, 3)<=0  u_g(:, 3)+delta*sqrt(mse_g(:, 3))>0],2)==2),:);
        % construct the highly uncertainty sample set
        Sample_highly_uncertain=[];
%         count=0;
        for jj=1:num_obj
%             count=count+~isempty(S_predict_safe_Comp{jj})+~isempty(S_predict_fail_Comp{jj});
            Sample_highly_uncertain=[Sample_highly_uncertain;S_predict_safe_Comp{jj};S_predict_fail_Comp{jj}];
        end
%         if  count<6
%             Sample_highly_uncertain=search_x;
%         else
%             
            Sample_highly_uncertain=unique(Sample_highly_uncertain,'rows');
%         end
%         
        %%
        Sample_highly_uncertain_1=Sample_highly_uncertain(:,1:6);
        Sample_highly_uncertain_2=[Sample_highly_uncertain(:,1:2),Sample_highly_uncertain(:,4),Sample_highly_uncertain(:,8)];
        Sample_highly_uncertain_3=[Sample_highly_uncertain(:,1:2),Sample_highly_uncertain(:,3),Sample_highly_uncertain(:,7)];
        %%
        [u_g_uncertain(:, 1), mse_g_uncertain(:, 1)]=predictor(Sample_highly_uncertain_1,kriging_model{1});
        [u_g_uncertain(:, 2), mse_g_uncertain(:, 2)]=predictor(Sample_highly_uncertain_2,kriging_model{2});
        [u_g_uncertain(:,3), mse_g_uncertain(:, 3)]=predictor(Sample_highly_uncertain_3,kriging_model{3});
        %%
        mse_g_uncertain=sqrt(max(0,mse_g_uncertain));
        index_fail=find(sum(u_g_uncertain>=0,2)  <num_obj);
        index_safe=find(sum(u_g_uncertain>=0,2)== num_obj);
      %% Second stage: identify the samples located in the safe and failure areas respectively
        % find the samples located in the Safe regions to calculate their wrong sign expectation in failure regions
        Safe_y=u_g_uncertain(index_safe,:);
        Safe_mse=mse_g_uncertain(index_safe,:);
        % calculate the  wrong sign prediction of each component
        for ii=1:num_obj
            p_fail_Comp(:,ii)=Gaussian_CDF(-abs(Safe_y(:,ii)./Safe_mse(:,ii)));
        end
        p_fail=1-prod((1-p_fail_Comp),2);
        % P_fail=normcdf(0,Safe_y,Safe_mse);
        mu_fail=size(Safe_y,1)*mean(p_fail);
        % estimate the bootstrapt confidence interval
        if size(Safe_y,1)>1
            boot_fail = bootstrp(1000,@mean,p_fail);
            boot_fail=sort(boot_fail,1);
            k1=1000*CI_factor/2;
            k2=1000*(1-CI_factor/2);
            F_con_interval=[size(Safe_y,1)*boot_fail(k1,:),size(Safe_y,1)*boot_fail(k2,:)];
            CI_fail_max=max(F_con_interval);
        else
            CI_fail_max=mu_fail;
        end
        %% Third stage: identify the samples located in the fail but actual safe
        Fail_y=u_g_uncertain(index_fail,:);
        Fail_mse=mse_g_uncertain(index_fail,:);
        % calculate the  wrong sign prediction of each component
        
        for ii=1:num_obj
            p_safe_Comp(:,ii)=Gaussian_CDF(-abs(Fail_y(:,ii)./Fail_mse(:,ii)));
        end
        for jj=1:size(Fail_y,1)
            flag_fail=find(Fail_y(jj,:)<0);
            flag_safe=find(Fail_y(jj,:)>=0);
            p_safe(jj,:)=prod(p_safe_Comp(jj,flag_fail)).*prod(1-p_safe_Comp(jj,flag_safe));
        end
        % P_fail=normcdf(0,Safe_y,Safe_mse);
        mu_safe=size(Fail_y,1)*mean(p_safe);
        if size(Fail_y,1)>1
            % estimate the bootstrapt confidence interval
            boot_sample = bootstrp(1000,@mean,p_safe);
            boot_sample=sort(boot_sample,1);
            k1=1000*CI_factor/2;
            k2=1000*(1-CI_factor/2);
            S_con_interval=[size(Fail_y,1)*boot_sample(k1,:),size(Fail_y,1)*boot_sample(k2,:)];
            CI_safe_max=max(S_con_interval);
        else
            CI_safe_max=mu_safe;
        end
        
        %% Fourth stage: calculate the final value of maximum estimated relative error
        Predict_fail=find(sum(u_g>=0,2)<num_obj);
        N_f=size(Predict_fail,1);
        error_1=abs((N_f/(N_f-CI_safe_max))-1);
        error_2=abs((N_f/(N_f+CI_fail_max))-1);
        obj=max(error_1,error_2);
%         obj_comp=mean(Max_error_Comp);
%         if obj_comp>0.10
%             obj= obj_comp;
%         else
%             obj=obj_sys;
%         end
end

end